//imports for calculator and node.js:
import { calculate_all, time_from_seconds, format_time } from './pace_calc.mjs';

import * as http from 'http';
import * as fs from 'fs';
import * as url from 'url';
import * as nodemailer from 'nodemailer';

const port = process.env.PORT || 5000;

let results = [];

const server = http.createServer((req, res) => {
    // store path name from request:
    const pathname = url.parse(req.url, true).pathname;
    let page = (pathname.length == 1) ? 'index.html' : pathname.substring(1, pathname.length);

    // store user input from search query:
    const query = url.parse(req.url, true).query;

    if (page == 'index.html')
        results = [];

    if (query && page == 'results.html') {
        // query contains variables for calculations:
        results = calculate_all(query);
    }

    if (query && page == 'confirmation.html') {
        let name = query['name'];
        let email = query['email'];

        if (results) {
        if (name && email) {
            var transporter = nodemailer.createTransport({
                service: 'gmail',
                auth: {
                    user: 'noreply97729@gmail.com',
                    pass: 'abfuH712wh4312fqno&^%2bs'
                }
            });

            let s = format_time(time_from_seconds(results[0]));
            let p = format_time(time_from_seconds(results[2] * results[6]));

            let distance_units = results[3];
            let dd = parseInt(distance_units) ? parseInt(distance_units) : 1;
            let ud = distance_units.replace(/[0-9]/g, '');

            let pace_units = results[4];
            let dp = (parseInt(pace_units) ? parseInt(pace_units) : 1) * results[7];
            let up = pace_units.replace(/[0-9]/g, '');

            var message = '';
            switch(results[8])
            {
                case 1:
                    message = `Hi ${name}, running a pace of <span class="num">${p[0]}:${p[1]}:${p[2]}</span> per <span class="num">${dp}</span>${up} over a distance of <span class="num">${Math.round(results[1] / results[5] * dd * 100) / 100}</span>${ud} would take <span class="num">${s[0]}:${s[1]}:${s[2]}</span>, Your <span class="num">${dp}</span>${up} splits are:<br><br>`;
                    break;

                case 2:
                    message = `Hi ${name}, running a pace of <span class="num">${p[0]}:${p[1]}:${p[2]}</span> per <span class="num">${dp}</span>${up} for the duration of <span class="num">${s[0]}:${s[1]}:${s[2]}</span>, will mean that you have to run <span class="num">${Math.round(results[1] / results[5] * dd * 100) / 100}</span>${ud}, your <span class="num">${dp}</span>${up} splits are:<br><br>`;
                    break;
               
                case 3:
                    message = `Hi ${name}, in order to run <span class="num">${Math.round(results[1] / results[5] * dd * 100) / 100}</span>${ud} in <span class="num">${s[0]}:${s[1]}:${s[2]}</span> you need to run <span class="num">${p[0]}:${p[1]}:${p[2]}</span> per <span class="num">${dp}</span>${up}, Your <span class="num">${dp}</span>${up} splits are:<br><br>`;
                    break;
            }
            var num_increments = results[1] / results[6];

            for (let i = 1; i <= Math.floor(num_increments); i++) {
                let temp = format_time(time_from_seconds((results[2] * results[6]) * i));
                message += `<span class="num">${(i * dp)}</span>${up}: <span class="num">${temp[0]}:${temp[1]}:${temp[2]}</span><br>`;
            }

            if (num_increments % 1 > 0)
            {
                let temp = format_time(time_from_seconds((results[2] * results[6]) * num_increments));
                message += `<span class="num">${Math.round(num_increments * dp * 100) / 100}</span>${up}: <span class="num">${temp[0]}:${temp[1]}:${temp[2]}</span><br>`;
            }

            var mailOptions1 = {
                from: 'noreply97729@gmail.com',
                to: email,
                subject: 'Your Pace Results: ',
                html: `
               
                    <!DOCTYPE html>
                    <html lang="en">
                    <head>
                        <link rel="preconnect" href="https://fonts.googleapis.com">
                        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
                        <link href="https://fonts.googleapis.com/css2?family=Courier+Prime&display=swap" rel="stylesheet">
               
                        <meta charset="UTF-8">
                        <meta http-equiv="X-UA-Compatible" content="IE=edge">
                        <meta name="viewport" content="width=device-width, initial-scale=1.0">
               
                        <style>
                            * {
                                font-size: 16px;
                            }

                            .num {
                                font-family: 'Courier Prime', monospace;
                            }
                        </style>
               
                        <title>Document</title>
                    </head>
                    <body>
                        <p>${message}</p>
                    </body>
                    </html>    

                `
            };

            var mailOptions2 = {
                from: 'noreply97729@gmail.com',
                to: 'melbournebymelbourne@gmail.com',
                subject: 'Forwarded Email: ',
                html: `
               
                    <!DOCTYPE html>
                    <html lang="en">
                    <head>
                        <link rel="preconnect" href="https://fonts.googleapis.com">
                        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
                        <link href="https://fonts.googleapis.com/css2?family=Courier+Prime&display=swap" rel="stylesheet">
               
                        <meta charset="UTF-8">
                        <meta http-equiv="X-UA-Compatible" content="IE=edge">
                        <meta name="viewport" content="width=device-width, initial-scale=1.0">
               
                        <style>
                            * {
                                font-size: 16px;
                            }

                            .num {
                                font-family: 'Courier Prime', monospace;
                            }
                        </style>
               
                        <title>Document</title>
                    </head>
                    <body>
                        <p>User's Email Address: ${email}</p>
                        <p>User's Name: ${name}</p>
                        <p>Forwarded Message: </p>
                        <br>
                        <p>${message}</p>
                    </body>
                    </html>    

                `
            };

            transporter.sendMail(mailOptions1, (error, info) => {
                if (error) {
                    console.log(error);
                }
                else {
                    console.log('Email sent: ' + info.response);
                }
            });

            transporter.sendMail(mailOptions2, (error, info) => {
                if (error) {
                    console.log(error);
                }
                else {
                    console.log('Email sent: ' + info.response);
                }
            });
        }
        }
        else {
            page = 'index.html';
            results = [];
        }
    }

    // tell node to parse the given file as html:
    res.writeHead(200, { 'Content-Type': 'text/html' });

    // read and write given html file and handle errors:
    fs.readFile(page, (error, data) => {
        if (error) {
            res.writeHead(404);
            res.write("File not Found");
        }
        else {
            res.write(data)
        }
        res.end();
    });
});

// handle errors for listening on a port:
server.listen(port, (error) => {
    if (error) {
        console.log("An Error Occured: ", error);
    }
    else {
        console.log("Server is listening on port: ", port);
    }
});


// table to store conversion between units and kilometers:
const unit_conversion = {
    'km': 1,
    'mi': 1.60934,
    'm': 0.001,
    'yrd': 0.0009144,
    'marathon': 42.195,
    'half-marathon': 21.0975,
    '100km': 100,
    '50km': 50,
    '20km': 20,
    '10km': 10,
    '5km': 5,
    '3km': 3,
    '2mi': 3.21869,
    '100mi': 160.934,
    '1500m': 1.5,
    '800m': 0.8,
    '400m': 0.4,
    '200m': 0.2,
    '100m': 0.1
}

// CHECK: time to seconds converted correctly: Yes
function time_to_sec(time)
{
    for (let i = 0; i < 3; i++)
        if (!time[i]) time[i] = 0;

    return parseInt(time[0] * 3600) + parseInt(time[1] * 60) + parseInt(time[2]);
}

function find_missing(time, pace, distance)
{
    let t, d, p, c = 0;
    t = p = d = false;
   
    // Check if time is missing:
    if (time[0] || time[1] || time[2])
    {
        t = true;
        c++;
    }
   
    // Check if distance is missing:
    if (distance)
    {
        d = true;
        c++;
    }

    // Check if pace is missing:
    if (pace[0] || pace[1] || pace[2])
    {
        p = true;
        c++;
    }

    /* Return Values:
        0: Incorrect amount of information given,
        1: Time missing,
        2: Distance missing,
        3: Pace missing,
        4: pace and distance missing, (default distance to 1)
        5: time and distance missing, (default distance to 1)
    */

    if (c == 1 && !d)
    {
        return t ? 4 : p ? 5 : 0;
    }
    return (c >= 2) ? (c > 2) ? 3 : (!t) ? 1 : (!d) ? 2 : (!p) ? 3 : 0 : 0;
}

// assuming distance is in km, pace is in s/km:
function solve_time(distance, pace)
{
    return distance * pace;
}

// assuming pace is in s/km:
function solve_distance(time, pace)
{
    return time / pace;
}

// assuming distance is in km:
function solve_pace(time, distance)
{
    return time / distance;
}

export function calculate_all(query)
{
    // CHECK: stores time correctly: Yes
    const time = [
        query['time-hours'],
        query['time-minutes'],
        query['time-seconds'],
    ];
    const time_in_seconds = time_to_sec(time);

    // CHECK: stores pace correctly: Yes
    const pace = [
        query['pace-hours'],
        query['pace-minutes'],
        query['pace-seconds'],
    ];
    const pace_in_seconds = time_to_sec(pace);

    //CHECK: distance handled correctly: Yes
    const distance = query['distance'];
    const distance_units = query['d-measurement'];
    const dist_conversion = unit_conversion[distance_units];
    const distance_in_km = distance * dist_conversion;

    //CHECK: pace handled correctly: Yes
    const pace_units = query['p-measurement'];
    const pace_dist = query['pace-distance'] ? query['pace-distance'] : 1;
    const pace_conversion = unit_conversion[pace_units] * pace_dist;
    const pace_in_km = pace_in_seconds / pace_conversion;

    console.log(pace_in_km, distance_in_km);

    switch (find_missing(time, pace, distance))
    {
        case 1:
            return [
                solve_time(distance_in_km, pace_in_km),
                distance_in_km,
                pace_in_km,
                distance_units, pace_units,
                dist_conversion, pace_conversion, pace_dist, 1
            ];
       
        case 2:
            return [
                time_in_seconds,
                solve_distance(time_in_seconds, pace_in_km),
                pace_in_km,
                distance_units, pace_units,
                dist_conversion, pace_conversion, pace_dist, 2
            ];
       
        case 3:
            return [
                time_in_seconds,
                distance_in_km,
                solve_pace(time_in_seconds, distance_in_km),
                distance_units, pace_units,
                dist_conversion, pace_conversion, pace_dist, 3
            ];
       
        case 4:
            return [
                time_in_seconds,
                dist_conversion,
                solve_pace(time_in_seconds, dist_conversion),
                distance_units, pace_units,
                dist_conversion, pace_conversion, pace_dist, 3
            ];
           
        case 5:
            return [
                solve_time(dist_conversion, pace_in_km),
                dist_conversion,
                pace_in_km,
                distance_units, pace_units,
                dist_conversion, pace_conversion, pace_dist, 1
            ];

        default:
            return 0;
    }
}

export function time_from_seconds(seconds)
{
    const h = seconds / 3600;
    const m = h % 1 * 60;
    const s = m % 1 * 60;

    return [
        Math.floor(h),
        Math.floor(m),
        Math.round(s)
    ];
}

export function format_time(time)
{
    for (let i = 0; i < 3; i++)
    {
        if (time[i] < 10)
        {
            time[i] = '0' + time[i];
        }
    }

    return time;
}




<!DOCTYPE html>
<html lang="en">

<head>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Roboto&display=swap" rel="stylesheet">
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <style>
        * {
            font-family: 'Roboto', sans-serif;
            font-size: 20px;
        }

        body {
            margin: 0px;
            background-image: linear-gradient(to bottom, #9e477033, #631d7642), url('res/bg2.jpg');
            height: 100vh;
            background-size: cover;
        }

        .input {
            display: flex;
            flex-direction: column;
        }

        .page-wrapper {
            display: flex;
            justify-content: center;
        }

        .contact-info {
            backdrop-filter: blur(5px);
            margin-top: 20vh;
            opacity: 0.8;
            background-color: #2E2532;
            color: white;
            padding: 5%;
            border-radius: 15px;
            transition: 0.3s;
            padding-top: 2%;
            padding-bottom: 3%;

            display: flex;
            flex-direction: column;
            justify-content: center;
        }

        .contact-info:hover {
            opacity: 0.925;
        }

        .input-item {
            display: flex;
            justify-content: space-around;
            margin: 10px;
        }

        .input-item>input {
            width: 100%;
        }

        .input-item>label {
            width: 70px;
            margin-right: 15px;
        }

        a {
            text-decoration: none;
            color: black;
            padding-left: 20px;
            padding-right: 20px;
        }

        p {
            font-size: 24px;
            padding: 0;
        }

        .button {
            background-color: white;
            border: none;
            border-radius: 5px;
            transition: 0.3s;
        }

        .button:hover {
            background-color: lightgray;
        }

        .btc {
            margin-top: 1%;
            display: flex;
            justify-content: center;
        }
    </style>

    <title>Results</title>
</head>

<body>
    <div class="page-wrapper">
        <div class="contact-info">
            <div>
                <p>Please enter your name and email and we will send you your splits for free</p>
            </div>
            <div>
                <form action="confirmation.html" action="GET">
                    <div class="input">
                        <div class="input-item">
                            <label>Name:</label>
                            <input type="text" name="name" id="name">
                        </div>
                        <div class="input-item">
                            <label>Email:</label>
                            <input type="email" name="email" id="email">
                        </div>
                        <div class="input-item">
                            <input type="submit" id="submit" class="button">
                        </div>
                    </div>
                </form>
            </div>
            <div class="btc">
                <a href="/" class="button">Back To Calculator</a>
            </div>
        </div>
    </div>
</body>

</html>

<!DOCTYPE html>
<html lang="en">

<head>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Roboto&display=swap" rel="stylesheet">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <style>
        * {
            font-family: 'Roboto', sans-serif;
            font-size: 20px;
        }

        body {
            margin: 0px;
            background-image: linear-gradient(to bottom, #9e477033, #631d7642), url('res/bg1.jpg');
            height: 100vh;
            background-size: cover;
        }

        .page-wrapper {
            display: flex;
            justify-content: center;
        }

        .calc-title {
            font-size: 30px;
            margin-bottom: 15px;
            margin-top: 10px;
            color: white;
        }

        .pace-calculator {
            backdrop-filter: blur(5px);
            margin-top: 20vh;
            opacity: 0.8;
            background-color: #2E2532;
            color: white;
            padding: 5%;
            border-radius: 15px;
            transition: 0.3s;
        }

        .pace-calculator:hover {
            opacity: 0.925;
        }

        .pace-calculator:hover input[type='number'] {
            border-color: #201a23;
        }

        .input {
            display: flex;
            flex-direction: column;
        }

        input {
            color: rgb(238, 237, 237);
        }

        .input-row {
            padding-top: 2%;
            padding-bottom: 2%;
        }

        input[type='number'] {
            border: 0;
            border-bottom: 3px solid #201a23af;
            background-color: #2E2532;
        }

        ::placeholder {
            color: rgb(238, 237, 237);
        }

        select {
            border: none;
            padding: 5px;
            border-radius: 4px;
            background-color: #f1f1f1;
            font-size: 15px;
        }

        option {
            font-size: 15px;
        }

        label {
            margin-right: 10px;
            margin-left: 10px;
        }

        .button {
            background-color: transparent;
            border-radius: 5px;
            border: 3px solid #201a23af;
            transition: 0.3s;
            padding: 5px;
        }

        .button:hover {
            background-color: #201a23af;
        }

        .submit {
            display: flex;
            justify-content: space-around;
        }

        #display-error {
            opacity: 0;
            transition: 0.3s;
        }

        #pd {
            width: 50px;
        }
    </style>

    <title>Pace Calculator</title>
</head>

<body>
    <div class="page-wrapper">
        <div class="pace-calculator">
            <p class="calc-title">Pace Calculator</p>
            <form action="results.html" id="form" method="GET">
                <div class="input">
                    <div class="time input-row">
                        <label>Time:</label>
                        <label>
                            <input placeholder="Hrs" name="time-hours" type="number" id="th" min="0" max="59"> :
                        </label>
                        <label>
                            <input placeholder="Min" name="time-minutes" type="number" id="tm" min="0" max="59"> :
                        </label>
                        <label>
                            <input placeholder="Sec" name="time-seconds" type="number" id="ts" min="0" max="59">
                        </label>
                    </div>
                    <div class="distance input-row">
                        <label>Distance:</label>
                        <label>
                            <input type="number" name="distance" id="dst" min="1">
                        </label>
                        <select name="d-measurement">
                            <option value="km" selected>Kilometers</option>
                            <option value="mi">Mile</option>
                            <option value="m">Meters</option>
                            <option value="yrd">Yards</option>
                            <option disabled>----------</option>
                            <option value="marathon">Marathon</option>
                            <option value="half-marathon">Half Marathon</option>
                            <option value="10km">10km</option>
                            <option value="5km">5km</option>
                            <option value="2mi">2 Mile</option>
                            <option value="3km">3km</option>
                            <option value="mi">1 Mile</option>
                            <option value="1500m">1500m</option>
                            <option value="800m">800m</option>
                            <option value="400m">400m</option>
                            <option value="50km">50km</option>
                            <option value="100km">100km</option>
                            <option value="100mi">100 Mile</option>
                        </select>
                    </div>
                    <div class="pace input-row">
                        <label>Pace:</label>
                        <label>
                            <input placeholder="Hrs" name="pace-hours" type="number" id="ph" min="0" max="59"> :
                        </label>
                        <label>
                            <input placeholder="Min" name="pace-minutes" type="number" id="pm" min="0" max="59"> :
                        </label>
                        <label>
                            <input placeholder="Sec" name="pace-seconds" type="number" id="ps" min="0" max="59">
                        </label>
                        <label>
                            <label>Per</label>
                            <input placeholder="Dist" name="pace-distance" type="number" id="pd" min="1">
                        </label>
                        <select name="p-measurement">
                            <option value="km" selected>Kilometers</option>
                            <option value="mi">Mile</option>
                            <option value="m">Meters</option>
                            <option disabled>-------------</option>
                            <option value="400m">400m</option>
                            <option value="200m">200m</option>
                            <option value="5km">5km</option>
                            <option value="10km">10km</option>
                        </select>
                    </div>
                    <div class="submit input-row">
                        <input type="submit" class="button" id="sbmt">
                        <input type="reset" class="button">
                    </div>
                </div>
            </form>
        </div>
    </div>
</body>

<script>
    let sub = document.getElementById('sbmt');
    let form = document.getElementById('form');

    sub.addEventListener('click', (e) => {
        let fv = document.getElementById('th').value > 0 ||
            document.getElementById('tm').value > 0 ||
            document.getElementById('ts').value > 0;

        let tv = document.getElementById('ph').value > 0 ||
            document.getElementById('pm').value > 0 ||
            document.getElementById('ps').value > 0;

        if (!(fv || tv))
        {
            alert("You need to input at least 2 variables!");
            sub.disabled = true;
        }
    });

    form.addEventListener("input", () => {
        let fv = document.getElementById('th').value > 0 ||
            document.getElementById('tm').value > 0 ||
            document.getElementById('ts').value > 0;

        let tv = document.getElementById('ph').value > 0 ||
            document.getElementById('pm').value > 0 ||
            document.getElementById('ps').value > 0;

        if (fv || tv)
        {
            sub.disabled = false;
        }
    });
</script>

</html>

<!DOCTYPE html>
<html lang="en">

<head>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Roboto&display=swap" rel="stylesheet">
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <style>
        * {
            font-family: 'Roboto', sans-serif;
            font-size: 20px;
        }

        body {
            margin: 0px;
            background-image: linear-gradient(to bottom, #9e477033, #631d7642), url('res/bg3.jpg');
            height: 97vh;
            background-size: cover;
        }

        a {
            text-decoration: none;
            color: white;
        }

        .page-wrapper {
            height: auto;
            display: flex;
            justify-content: center;
        }

        .container {
            width: max-content;
            backdrop-filter: blur(5px);
            margin-top: 20vh;
            opacity: 0.8;
            background-color: #2E2532;
            color: white;
            padding: 5%;
            border-radius: 15px;
            transition: 0.3s;
        }

        .container:hover {
            opacity: 0.925;
        }
    </style>

    <title>Confirmation</title>
</head>

<body>
    <div class="page-wrapper">
        <div class="container">
            <p>Check your inbox or your junk folder! Thank you</p>
            <a href="/">Back To Calculator</a>
        </div>
    </div>
</body>

</html>
